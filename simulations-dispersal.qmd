---
title: "Dispersal"
listing:
  - id: "dispersal-2022"
    contents: outputs/dispersal/2022/*.gif
    page-size: 3
    template: gallery.ejs
  - id: "dispersal-2023"
    contents: outputs/dispersal/2023/*.gif
    page-size: 3
    template: gallery.ejs
  - id: "dispersal-2024"
    contents: outputs/dispersal/2024/*.gif
    page-size: 3
    template: gallery.ejs
  - id: "dispersal-2025"
    contents: outputs/dispersal/2025/*.gif
    page-size: 3
    template: gallery.ejs
editor_options: 
  chunk_output_type: console
---

The spruce budworm (SBW) atmospheric transport model is an individual-based (or agent-based) modelling framework designed to simulate and understand the long-distance dispersal of adult SBW moths (_Choristoneura fumiferana_).
This model is crucial for forecasting future larval defoliation in new areas, where moth immigration can enable populations to overcome local limitations and initiate or expand outbreaks, thereby supporting forest management decisions.
Historically, large numbers of SBW moths have been observed to disperse over vast areas, covering distances up to 600 km (373 miles) from their origin.
Such mass exodus flights, often involving billions of moths, typically occur in favourable weather conditions, starting around sunset and continuing for several hours with wind-driven transport. 
A significant proportion of these dispersing moths are egg-carrying females.

Representative animations of simulation outputs are presented here for the latest dispersal years.

**Please refer to the [Contact](contact.qmd) page for data requests.**

```{r animation-files, echo = FALSE, message = FALSE}
library(googledrive)
library(magick)

if (Sys.getenv("CI") == "true") {
  ## TODO: fix error: ! `path` does not represent a service account.
  # drive_auth(path = fs::dir_ls(path = ".", glob = "gha-creds-*.json", type = "file"))
  drive_auth(path = Sys.getenv("GOOGLE_AUTH")) ## TODO: don't use env var
} else {
  creds_file <- fs::dir_ls(path = ".", glob = "sbw-atm-website-*.json", type = "file")
  if (nzchar(creds_file) && file.exists(creds_file)) {
    drive_auth(path = creds_file)
  }
}

drive_files <- data.frame(
  year = 2022L:2025L,
  gid = c(
    "10KTAwZYCu8B5MHDbHSlNKwGS_UYJzL88", ## 2022 dispersal
    "15xLbxqNp9maGb92zvY3vg90VpGq2MCLI", ## 2023 dispersal
    "13A1qFtKew9i8IpbWAmCi3Yk5P-hEuOmr", ## 2024 dispersal
    "1CzhM1L4XhaMKuarvEwvMuEoeoLgAuHQ2"  ## 2025 dispersal
  )
)
this_year <- max(drive_files$year)

purrr::walk2(
  .x = drive_files$gid,
  .y = drive_files$year,
  .f = function(gid, year) {
    destdir <- file.path("outputs", "dispersal", year) |> fs::dir_create()
    destfile <- file.path(destdir, glue::glue("SBW_Flight_{year}.gif"))
    destfile_tmp <- file.path(tempdir(), basename(destfile))
     
    if (!file.exists(destfile) || year == this_year) {
      ## re-download current year to get daily updates
      drive_download(file = as_id(gid), path = destfile, overwrite = TRUE)
    
      ## 1. add USFS branding to animation files prior to 2025;
      ## 2. slow down animations;
      logo_width <- 125 ## new logo width, in pixels
      logo <- image_read("images/usfs.png") |> image_scale(as.character(logo_width))
      logo_height <- image_info(logo)$height
      gif <- image_read(destfile)
      fps <- 1 ## frame per second (animation speed); adjust as needed
      
      if (year < 2025) {
        frames <- image_apply(gif, function(frame) {
          frame_info <- image_info(frame)
          offset <- glue::glue("+{frame_info$width - (logo_width + 25)}+{frame_info$height - (logo_height + 75)}")
          image_composite(frame, logo, offset = offset)
        })
        image_write_gif(frames, path = destfile_tmp, delay = 1 / fps)
      } else {
        image_write_gif(gif, path = destfile_tmp, delay = 1 / fps)
      }
      
      file.copy(from = destfile_tmp, to = destfile, overwrite = TRUE)
      
      ## cleanup
      gc()
    }
  }
)
```

## 2025

::: {#dispersal-2025}
:::

## 2024

::: {#dispersal-2024}
:::

## 2023

::: {#dispersal-2023}
:::

## 2022

::: {#dispersal-2022}
:::
